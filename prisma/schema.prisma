generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String @unique
  password String

  cart   Cart?
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role UserRole @default(USER)

  provider   String?
  providerId String?

  verified         Boolean           @default(false)
  verificationCode VerificationCode?
}

model Category {
  id       Int       @id @default(autoincrement()) // 4
  name     String    @unique
  products Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int // 4
  ingredients Ingredient[]
  products    ProductItem[]
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]
}

model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User?      @relation(fields: [userId], references: [id])
  userId Int?       @unique
  items  CartItem[]

  totalAmount Int    @default(0)
  tokenId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id            Int         @id @default(autoincrement())
  ProductItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity    Int
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items OrderItem[]

  fullName       String
  address        String
  email          String
  phone          String
  comment        String?
  timeToDelivery DateTime @default(now())
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  name     String
  price    Int
  quantity Int
}

model VerificationCode {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  code   String @unique

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
